plugins {
    id 'java'
    id 'eclipse'
    id 'org.sonarqube' version '3.2.0'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

configurations {
    // configuration pour cup
    cupGeneration
    // configuration pour JFlex
    jflexGeneration
}

dependencies {
    // jflex : generation de l'analyseur lexical
    jflexGeneration 'de.jflex:jflex:1.8.2'
    // cup : generation de l'analyseur syntaxique
    cupGeneration 'com.github.vbmacher:java-cup:11b-20160615-1'
    // on a aussi besoin du runtime CUP pour la compilation et l'execution
    implementation 'com.github.vbmacher:java-cup-runtime:11b-20160615-1'
}

// on reutilise la tache ant pour jflex
task jflex (group: 'build') {
    ext.source = fileTree ( 'src/main/jflex'){
        include "**/*.jflex"
        include "**/*.flex"
    }
    ext.destdir = file("${buildDir}/generated/sources/${name}/main/java")
    ext.noback = 'true'
    ext.verbose = 'on'
    ext.encoding = 'UTF-8'

    inputs.property('noback', jflex.noback)
    inputs.property('encoding', jflex.encoding)
    inputs.files(jflex.source)
    outputs.dir(jflex.destdir)

    ant.taskdef(name:'jflex', classpath:configurations.jflexGeneration.asPath,  classname:"jflex.anttask.JFlexTask")
    doLast {
        sourceSets.main.java.srcDir jflex.destdir
        source.each { File f ->
            println "jflex source --> ${f}"
            ant.jflex(file:f, destdir:destdir, nobak:noback, verbose:verbose, encoding:jflex.encoding)
        }
    }
}

// on reutilise la tache ant pour cup
task cup (group: 'build') {
    ext.source = fileTree ('src/main/cup'){
        include "**/*.cup"
    }
    ext.destdir = file("${buildDir}/generated/sources/${name}/main/java")
    ext.force = 'true'
    ext.dump = 'off'
    ext.locations = 'false'

    inputs.property('locations', cup.locations)
    inputs.files(cup.source)
    outputs.dir(cup.destdir)

    ant.taskdef(name:'cup', classpath:configurations.cupGeneration.asPath,  classname:"java_cup.anttask.CUPTask")
    doLast {
        sourceSets.main.java.srcDir cup.destdir
        source.each { File f ->
            println "cup source --> ${f}"
            ant.cup(srcfile:f, destdir:destdir, force:force, dump:dump, locations:locations)
        }
    }
}

compileJava.dependsOn cup, jflex
compileJava.options.encoding = 'UTF-8'

sourceSets {
    main {
        java {
            srcDir cup
            srcDir jflex
        }
    }
}

jar {
    manifest {
        attributes  'Main-Class': 'fr.usmb.m1isc.compilation.simple.Main'
    }
}

task fatJar(type: Jar, group: 'build'){
    archiveClassifier = 'fat'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    // on ajoute le runtime cup
    // car on en a besoin pour faire tourner l'analyseur
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes  'Main-Class': 'fr.usmb.m1isc.compilation.simple.Main'
    }
}
build.dependsOn fatJar

// pour heroku
task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean

// pour SonarQube
sonarqube {
    properties {
        // pas de d'inspection (style/code coverage, etc. sur les classes generees)
        property "sonar.exclusions", "**/generated*/**"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

// Integration avec eclipse
// creation des dossiers pour les classes generees par jflex et cup
task makeGeneratedDirs {
    doLast {
        mkdir jflex.destdir
        mkdir cup.destdir
    }
}
// Tache modifiant l'encodage par defaut du projet eclipse
def eclipseResourceEncoding = tasks.register('eclipseResourceEncoding')
// encoding will be defined when eclipse task run
tasks.named('eclipse'){ dependsOn(eclipseResourceEncoding) }

eclipse {
    // tasks to run on "Refresh Gradle Project"
    synchronizationTasks([eclipseResourceEncoding, makeGeneratedDirs])
    // tasks to run when build automatically is enabled
    eclipse.autoBuildTasks([cup, jflex])
}

// modification encodage par defaut du projet
eclipseResourceEncoding.configure {
    ext.outputFile = file('.settings/org.eclipse.core.resources.prefs')
    ext.projectEncoding = java.nio.charset.Charset.defaultCharset().toString()
    inputs.property("file.encoding", projectEncoding)
    outputs.file(outputFile).withPropertyName('outputFile')

    doLast {
        Properties eclipseEncodingProperties = new Properties(Collections.singletonMap('eclipse.preferences.version','1'))
        if (outputFile.exists()) {
            outputFile.withInputStream { eclipseEncodingProperties.load(it) }
        }
        eclipseEncodingProperties.put('encoding/<project>', projectEncoding)
        outputFile.withOutputStream { eclipseEncodingProperties.store(it, 'generated by '+name) }
    }
}
