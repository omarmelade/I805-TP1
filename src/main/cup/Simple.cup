/* package et imports */
package fr.evaluator;
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;

// nom de la classe a generer
class SimpleParser;

/* inclusion du code */

action code {:
    private boolean erreur = false;
    private  Hashtable<String, Integer> table= new Hashtable<String, Integer>();
:};


parser code {:
    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
    public void report_error(String message, Object info) {
        String m = "";
        if (info instanceof java_cup.runtime.Symbol) {
            Symbol s = ((Symbol) info);
            if (s.left >= 0) {
                /* Ajoute le numero de ligne  */
                m = m + "Ligne " + (s.left+1) + " ";
            }
            if (s.right >= 0) {
                /* Ajoute le numero de colonne  */
                m = m + "Colonne " + (s.right+1) + " ";
            }
            if (s.left >=0  || s.right >= 0) {
                m = m + ": ";
            }
        }
        m = m + "Erreur de syntaxe";
        System.out.println(m);
    }
:};

 init with {:
    //    initialisation du parser
:};

/* symboles terminaux */
terminal Integer INTEGER;
terminal ERROR, PLUS, MINUS, TIMES, DIVIDE, UMINUS, SEMI, PAR_OPEN, PAR_CLOSE, MOD, LET, EQUAL;
terminal String VARIABLE;

/* non terminaux */
non terminal list_expr, lexpr;
non terminal Integer expr, assign;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left PAR_CLOSE, PAR_OPEN;
precedence left UMINUS;

/* grammaire */
list_expr	::= lexpr list_expr
			  | lexpr
			  ;

// chaque expression arithmetique est terminee par un point virgule (SEMI)
lexpr 		::= expr:e SEMI
                {: if (! erreur) System.out.println("Eval = " + e); erreur = false; :}
              | assign:v SEMI
                {: if (! erreur) System.out.println("Eval = "+ v); erreur = false; :}
			  | error SEMI
			    {: erreur = false; :}
			  ;

assign      ::= LET VARIABLE:v EQUAL expr:e
                {: if(!erreur) { table.put(v, e ); } :}
              ;

// on a une liste d'expressions (avec au moins une expression)
expr   ::=
        INTEGER:e
          {: RESULT = e; :}
        |
        expr:e1 PLUS expr:e2
          {: RESULT = new Integer(e1 + e2); :}
        |
        expr:e1 MINUS expr:e2
          {: RESULT =  new Integer(e1 - e2); :}
        |
        MINUS expr:e
          {: RESULT = new Integer(0 - e); :}
        %prec UMINUS
        |
        expr:e1 TIMES expr:e2
          {: RESULT = new Integer(e1 * e2); :}
        |
        expr:e1 DIVIDE expr:e2
          {:
            if (erreur) { RESULT= 0; }
            else if (e2 == 0) {
                RESULT = 0;
                erreur = true;
                System.err.println("Erreur division par zero");
            } else {
                RESULT = new Integer(e1 / e2);
            }
          :}
        |
        expr:e1 MOD expr:e2
          {:
            if (erreur) { RESULT= 0; }
            else if (e2 == 0) {
                RESULT = 0;
                erreur = true;
                System.err.println("Erreur modulo par zero");
            } else {
                RESULT = new Integer(e1 % e2);
            }
          :}
        |
        PAR_OPEN expr:e PAR_CLOSE
          {: RESULT = e; :}
        |
        VARIABLE:v
          {: if(table.get(v) != null) { RESULT = table.get(v); }
             else { RESULT = 0; erreur=true; System.err.println("Erreur variable indefinie"); }
          :}
        ;