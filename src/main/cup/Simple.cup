/* package et imports */
package fr.evaluator;
import java_cup.runtime.Symbol;

// nom de la classe a generer
class Evaluator;

/* inclusion du code */

action code {:
    // pour utilisation dans les actions (classe action)
    private boolean erreur = false;
:};


parser code {:
    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
    public void report_error(String message, Object info) {
        String m = "";
        if (info instanceof java_cup.runtime.Symbol) {
            Symbol s = ((Symbol) info);
            if (s != null && s.left >= 0 ) {
                /* Ajoute le numero de ligne  et de colonne*/
                m =  "Ligne " + (s.left+1) + ", Colonne " + (s.right+1) + " : ";
                }
            }
        m = m + message;
        System.err.println(m);
        }
:};

 init with {:
    //    initialisation du parser
:};

/* symboles terminaux */
terminal Integer CHIFFRE;
terminal PLUS, MINUS, TIMES, DIVIDE, UMINUS, SEMI;
terminal ERROR;

/* non terminaux */
non terminal Integer expr;
non terminal liste_expr, lexpr;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

/* grammaire */

// on a une liste d'expressions (avec au moins une expression)
expr   ::=
        expr:e1 PLUS expr:e2
          {: RESULT = e1 + e2; :}
        |
        expr:e1 TIMES expr:e2
          {: RESULT = e1 * e2; :}
        |
        expr:e1 DIVIDE expr:e2
          {: RESULT = e1 / e2; :}
        |
        expr:e1 MINUS expr:e2
          {: RESULT = e1 - e2; :}
        |
        MINUS expr:e
          {: RESULT = - e; :}
        %prec UMINUS
        |
        CHIFFRE:n
          {: RESULT = n; :}
       ;
